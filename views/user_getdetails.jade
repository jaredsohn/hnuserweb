extends layout

block content
  p created: #{data.userinfo_days_ago} days ago
  p karma: #{data.userinfo_karma}
  p average: #{data.userinfo_avg_rounded}
  p about: 
  div(style="white-space: pre-wrap; margin-left: 15px")
    small
      !=data.userinfo_about
  p
  p Comment karma:  #{data.comment_karma}  (#{data.comment_count} comments)
  p Story karma: #{data.story_karma} (#{data.story_count} stories)
  p % comment karma: #{data.comment_karma_percent}
  p Unknown karma (deletions/lag/?): #{data.unknown_karma}

  <a href="https://hn.algolia.com/#!/all/forever/prefix/0/author%3A#{data.author}">hnsearch</a>&nbsp;&nbsp;<a href="https://news.ycombinator.com/user?id=#{data.author}">hn profile</a>&nbsp;&nbsp;<a href="./csv/" download>Download CSV</a>&nbsp;&nbsp;<a href="./stats_csv/" download>Download Metadata CSV</a>&nbsp;&nbsp;<a href="./json/" download>Download JSON</a>

  link(rel='stylesheet', href='/stylesheets/nv.d3.min.css')
  link(rel='stylesheet', href='/stylesheets/hnuserweb.css')

  div(id="chart1")
    svg
  div(id="chart2")
    svg
  div(id="chart3")
    svg
  div(id="chart4")
    svg
  div(id="chart5")
    svg
  div(id="chart6")
    svg
  div(id="chart7")
    svg

  script.
    var data = !{JSON.stringify(data)}

  script(src="/lib/d3.v3.js")
  script(src="/lib/nv.d3.min.js")

  script.
    createPieChart = function(id, labels, values)
    {
      if (labels.length !== values.length)
        console.log("error creating pie chart: labels and values lengths differ");

      var chart_data = [];
      for (i = 0; i < labels.length; i++)
        chart_data.push({"label": labels[i], "value": values[i]});

      nv.addGraph(function() {
        var chart = nv.models.pieChart()
            .x(function(d) { return d.label })
            .y(function(d) { return d.value })
            .showLabels(true)
            .showLegend(false)

          d3.select("#" + id + " svg")
              .datum(chart_data)
            .transition().duration(1200)
              .call(chart);

        //Update the chart when window resizes.
        nv.utils.windowResize(function() { chart.update() });

        return chart;
      });        
    };

    createLineChart = function(id, labels, values)
    {
      nv.addGraph(function() {
        var chart = nv.models.lineChart()
                      .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
                      .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                      .transitionDuration(350)  //how fast do you want the lines to transition?
                      .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                      .showYAxis(true)        //Show the y-axis
                      .showXAxis(true)        //Show the x-axis
        ;

      chart.xAxis     //Chart x-axis settings
          .axisLabel(labels[0])
          .tickFormat(function(d) { return d3.time.format('%b %d %y')(new Date(d)); });

      chart.yAxis     //Chart y-axis settings
          .axisLabel(labels[1])
          .tickFormat(d3.format('.02f'));

      /* Done setting the chart up? Time to render it!*/
      
      d3.select('#' + id + ' svg')
        .datum(values)
        .call(chart);

        //Update the chart when window resizes.
        nv.utils.windowResize(function() { chart.update() });

        return chart;
      });
    }



    function get_karma_data_series()
    {
      var comment_karma = [];
      var story_karma = [];
      var total_karma = [];

      for (i = 0; i < data.line_chart_data.length; i++)
      {
        comment_karma.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_comment_karma });
        story_karma.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_story_karma });
        total_karma.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_story_karma + data.line_chart_data[i].total_comment_karma });
      }

      return [
      {
        values : comment_karma,
        key: 'Comment karma',
        color: '#ff00ff'
       },
      {
        values : story_karma,
        key: 'Story karma',
        color: '#ff7f0e'
      },
      {
        values : total_karma,
        key: 'Total karma',
        color: '#ff0000'
      }
      ];
    }

    function get_karma_count_series()
    {
      var comment_count = [];
      var story_count = [];
      var total_count = [];

      for (i = 0; i < data.line_chart_data.length; i++)
      {
        comment_count.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_comment_count });
        story_count.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_story_count });
        total_count.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_story_count + data.line_chart_data[i].total_comment_count });
      }

      return [
      {
        values : comment_count,
        key: 'Comment count',
        color: '#ff00ff'
       },
      {
        values : story_count,
       key: 'Story count',
        color: '#007f0e'
      },
      {
        values : total_count,
        key: 'Total count',
        color: '#ff0000'
      }
      ];
    }    

    function get_comment_karma_ave_series()
    {
      var comment_ave = [];

      for (i = 0; i < data.line_chart_data.length; i++)
      {
        comment_ave.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_comment_karma / data.line_chart_data[i].total_comment_count   });
      }

      return [
      {
        values : comment_ave,
         key: 'Comment Average',
        color: '#ff00ff'
      }
      ];
    }    


    function get_story_karma_ave_series()
    {
      var story_ave = [];

      for (i = 0; i < data.line_chart_data.length; i++)
      {
        story_ave.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_story_karma / data.line_chart_data[i].total_story_count});
      }

      return [
      {
        values : story_ave,
         key: 'Story Average',
        color: '#ff7f0e'
      }
      ];
    }  

    function get_comment_karma_percentage_series()
    {
      var comment_karma_percentage = [];

      for (i = 0; i < data.line_chart_data.length; i++)
      {
        comment_karma_percentage.push({x:data.line_chart_data[i].created_at_i * 1000, y: data.line_chart_data[i].total_comment_karma / (data.line_chart_data[i].total_comment_karma + data.line_chart_data[i].total_story_karma) * 100 });
      }

      return [
      {
        values : comment_karma_percentage,
         key: 'Comment Karma Percentage',
        color: '#ff7f0e'
      }
      ];
    }  


    createPieChart("chart1", ["# stories", "# comments"], [data.story_count, data.comment_count]);
    createPieChart("chart2", ["story karma", "comment karma", "Unknown (deleted?)"], [data.story_karma, data.comment_karma, data.unknown_karma]);
    createLineChart("chart3", ["time", "karma"], get_karma_data_series());
    createLineChart("chart4", ["time", "count"], get_karma_count_series());
    createLineChart("chart5", ["time", "ave karma/comment"], get_comment_karma_ave_series());
    createLineChart("chart6", ["time", "ave karma/story"], get_story_karma_ave_series());
    createLineChart("chart7", ["time", "comment karma percentage"], get_comment_karma_percentage_series());


