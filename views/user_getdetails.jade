extends layout

block content
  p created: #{data.userinfo_days_ago} days ago
  p karma: #{data.userinfo_karma}
  p average: #{data.userinfo_avg_rounded}
  p about: 
  div(style="white-space: pre-wrap")
    small
      !=data.userinfo_about
  p
  p Comment karma:  #{data.comment_karma}  (#{data.comment_count} comments)
  p Story karma: #{data.story_karma} (#{data.story_count} stories)
  p % comment karma: #{data.comment_karma_percent}
  p Unknown karma (deletions/lag/?): #{data.unknown_karma}

  <a href="https://hn.algolia.com/#!/all/forever/prefix/0/author%3A#{data.author}">hnsearch</a>&nbsp;&nbsp;<a href="https://news.ycombinator.com/user?id=#{data.author}">hn profile</a>&nbsp;&nbsp;<a href="./csv/" download>Download CSV</a>&nbsp;&nbsp;<a href="./stats_csv/" download>Download Metadata CSV</a>&nbsp;&nbsp;<a href="./json/" download>Download JSON</a>

  link(rel='stylesheet', href='/stylesheets/nv.d3.min.css')
  link(rel='stylesheet', href='/stylesheets/hnuserweb.css')

  div(id="chart1")
    svg
  div(id="chart2")
    svg
  div(id="chart3")
    svg

  script.
    var data = !{JSON.stringify(data)}

  script(src="/lib/d3.v3.js")
  script(src="/lib/nv.d3.min.js")

  script.
    createPieChart = function(id, labels, values)
    {
      if (labels.length !== values.length)
        console.log("error creating pie chart: labels and values lengths differ");

      var chart_data = [];
      for (i = 0; i < labels.length; i++)
        chart_data.push({"label": labels[i], "value": values[i]});

      nv.addGraph(function() {
        var chart = nv.models.pieChart()
            .x(function(d) { return d.label })
            .y(function(d) { return d.value })
            .showLabels(true)
            .showLegend(false)

          d3.select("#" + id + " svg")
              .datum(chart_data)
            .transition().duration(1200)
              .call(chart);

        //Update the chart when window resizes.
        nv.utils.windowResize(function() { chart.update() });

        return chart;
      });        
    };

    createLineChart = function(id, labels, values)
    {
      console.log("hi");

      nv.addGraph(function() {
        var chart = nv.models.lineChart()
                      .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
                      .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                      .transitionDuration(350)  //how fast do you want the lines to transition?
                      .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                      .showYAxis(true)        //Show the y-axis
                      .showXAxis(true)        //Show the x-axis
        ;

      chart.xAxis     //Chart x-axis settings
          .axisLabel(labels[0])
          .tickFormat(d3.format(',r'));

      chart.yAxis     //Chart y-axis settings
          .axisLabel(labels[1])
          .tickFormat(d3.format('.02f'));

      /* Done setting the chart up? Time to render it!*/
      
      d3.select('#' + id + ' svg')
        .datum(values)
        .call(chart);

        //Update the chart when window resizes.
        nv.utils.windowResize(function() { chart.update() });

        return chart;
      });
      
    }

    /**************************************
     * Simple test data generator
     */
    function sinAndCos() {
      var sin = [],sin2 = [],
          cos = [];

      //Data is represented as an array of {x,y} pairs.
      for (var i = 0; i < 100; i++) {
        sin.push({x: i, y: Math.sin(i/10)});
        sin2.push({x: i, y: Math.sin(i/10) *0.25 + 0.5});
        cos.push({x: i, y: .5 * Math.cos(i/10)});
      }

      //Line chart data should be sent as an array of series objects.
      return [
        {
          values: sin,      //values - represents the array of {x,y} data points
          key: 'Sine Wave', //key  - the name of the series.
          color: '#ff7f0e'  //color - optional: choose your own line color.
        },
        {
          values: cos,
          key: 'Cosine Wave',
          color: '#2ca02c'
        },
        {
          values: sin2,
          key: 'Another sine wave',
          color: '#7777ff',
          area: true      //area - set to true if you want this line to turn into a filled area chart.
        }
      ];
    }    

    // TODO: create multiple charts here based on data i have
    createPieChart("chart1", ["# stories", "# comments"], [data.story_count, data.comment_count]);
    createPieChart("chart2", ["story karma", "comment karma", "Unknown (deleted?)"], [data.story_karma, data.comment_karma, data.unknown_karma]);
    createLineChart("chart3", ["karma", "time"], sinAndCos());
